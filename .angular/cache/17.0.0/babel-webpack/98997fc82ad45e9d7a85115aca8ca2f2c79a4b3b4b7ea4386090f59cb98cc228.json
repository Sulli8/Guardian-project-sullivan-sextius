{"ast":null,"code":"import { BehaviorSubject } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nconst STEPS = [{\n  stepIndex: 1,\n  isComplete: false\n}, {\n  stepIndex: 2,\n  isComplete: false\n}, {\n  stepIndex: 3,\n  isComplete: false\n}];\nexport class StepsService {\n  steps$ = new BehaviorSubject(STEPS);\n  currentStep$ = new BehaviorSubject(null);\n  constructor() {\n    this.currentStep$.next(this.steps$.value[0]);\n  }\n  setCurrentStep(step) {\n    this.currentStep$.next(step);\n  }\n  getCurrentStep() {\n    return this.currentStep$.asObservable();\n  }\n  getSteps() {\n    return this.steps$.asObservable();\n  }\n  moveToNextStep() {\n    const index = this.currentStep$.value.stepIndex;\n    if (index < this.steps$.value.length) {\n      this.currentStep$.next(this.steps$.value[index]);\n    }\n  }\n  isLastStep() {\n    return this.currentStep$.value.stepIndex === this.steps$.value.length;\n  }\n  static ɵfac = function StepsService_Factory(t) {\n    return new (t || StepsService)();\n  };\n  static ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: StepsService,\n    factory: StepsService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["BehaviorSubject","STEPS","stepIndex","isComplete","StepsService","steps$","currentStep$","constructor","next","value","setCurrentStep","step","getCurrentStep","asObservable","getSteps","moveToNextStep","index","length","isLastStep","factory","ɵfac","providedIn"],"sources":["/Users/sullivan/Desktop/Guardian-project-sullivan-sextius/Guardian-project-sullivan-sextius/src/services/steps.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { StepModel } from '../models/step-model.model';\n\nconst STEPS = [\n  { stepIndex: 1, isComplete: false },\n  { stepIndex: 2, isComplete: false },\n  { stepIndex: 3, isComplete: false }\n];\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class StepsService {\n\n  steps$: BehaviorSubject<StepModel[]> = new BehaviorSubject<StepModel[]>(STEPS);\n  currentStep$: BehaviorSubject<StepModel> = new BehaviorSubject<StepModel>(null);\n\n  constructor() {\n    this.currentStep$.next(this.steps$.value[0]);\n  }\n\n  setCurrentStep(step: StepModel): void {\n    this.currentStep$.next(step);\n  }\n\n  getCurrentStep(): Observable<StepModel> {\n    return this.currentStep$.asObservable();\n  }\n\n  getSteps(): Observable<StepModel[]> {\n    return this.steps$.asObservable();\n  }\n\n  moveToNextStep(): void {\n    const index = this.currentStep$.value.stepIndex;\n\n    if (index < this.steps$.value.length) {\n      this.currentStep$.next(this.steps$.value[index]);\n    }\n  }\n\n  isLastStep(): boolean {\n    return this.currentStep$.value.stepIndex === this.steps$.value.length;\n  }\n}"],"mappings":"AACA,SAASA,eAAe,QAAoB,MAAM;;AAGlD,MAAMC,KAAK,GAAG,CACZ;EAAEC,SAAS,EAAE,CAAC;EAAEC,UAAU,EAAE;AAAK,CAAE,EACnC;EAAED,SAAS,EAAE,CAAC;EAAEC,UAAU,EAAE;AAAK,CAAE,EACnC;EAAED,SAAS,EAAE,CAAC;EAAEC,UAAU,EAAE;AAAK,CAAE,CACpC;AAKD,OAAM,MAAOC,YAAY;EAEvBC,MAAM,GAAiC,IAAIL,eAAe,CAAcC,KAAK,CAAC;EAC9EK,YAAY,GAA+B,IAAIN,eAAe,CAAY,IAAI,CAAC;EAE/EO,YAAA;IACE,IAAI,CAACD,YAAY,CAACE,IAAI,CAAC,IAAI,CAACH,MAAM,CAACI,KAAK,CAAC,CAAC,CAAC,CAAC;EAC9C;EAEAC,cAAcA,CAACC,IAAe;IAC5B,IAAI,CAACL,YAAY,CAACE,IAAI,CAACG,IAAI,CAAC;EAC9B;EAEAC,cAAcA,CAAA;IACZ,OAAO,IAAI,CAACN,YAAY,CAACO,YAAY,EAAE;EACzC;EAEAC,QAAQA,CAAA;IACN,OAAO,IAAI,CAACT,MAAM,CAACQ,YAAY,EAAE;EACnC;EAEAE,cAAcA,CAAA;IACZ,MAAMC,KAAK,GAAG,IAAI,CAACV,YAAY,CAACG,KAAK,CAACP,SAAS;IAE/C,IAAIc,KAAK,GAAG,IAAI,CAACX,MAAM,CAACI,KAAK,CAACQ,MAAM,EAAE;MACpC,IAAI,CAACX,YAAY,CAACE,IAAI,CAAC,IAAI,CAACH,MAAM,CAACI,KAAK,CAACO,KAAK,CAAC,CAAC;;EAEpD;EAEAE,UAAUA,CAAA;IACR,OAAO,IAAI,CAACZ,YAAY,CAACG,KAAK,CAACP,SAAS,KAAK,IAAI,CAACG,MAAM,CAACI,KAAK,CAACQ,MAAM;EACvE;;qBA/BWb,YAAY;EAAA;;WAAZA,YAAY;IAAAe,OAAA,EAAZf,YAAY,CAAAgB,IAAA;IAAAC,UAAA,EAFX;EAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}