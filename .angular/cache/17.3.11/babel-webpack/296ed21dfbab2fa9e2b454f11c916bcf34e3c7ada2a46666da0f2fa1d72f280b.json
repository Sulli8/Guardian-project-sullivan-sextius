{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { CommonModule } from '@angular/common';\nimport { Component } from '@angular/core';\nimport { ReactiveFormsModule, Validators } from '@angular/forms';\nimport { NavBarComponent } from '../nav-bar/nav-bar.component';\nimport { SweetAlert2Module } from '@sweetalert2/ngx-sweetalert2';\nimport Swal from 'sweetalert2';\nlet PrescriptionFormComponent = class PrescriptionFormComponent {\n  router;\n  fb;\n  apiService;\n  prescriptionForm;\n  medications;\n  stepData = [{\n    key: 'nom',\n    value: ''\n  }, {\n    key: 'traitement',\n    value: ''\n  }, {\n    key: 'frequence',\n    value: ''\n  }, {\n    key: 'medicament',\n    value: ''\n  }, {\n    key: 'dosage',\n    value: ''\n  }, {\n    key: 'prescriptionDate',\n    value: ''\n  }, {\n    key: 'prescriptionTime',\n    value: ''\n  }];\n  currentStepIndex = 0; // Pour suivre l'étape actuelle\n  constructor(router, fb, apiService) {\n    this.router = router;\n    this.fb = fb;\n    this.apiService = apiService;\n    this.prescriptionForm = this.fb.group({\n      medicationId: ['', Validators.required],\n      dosage: ['', Validators.required],\n      frequence: ['', Validators.required],\n      datePrescribed: [new Date().toISOString(), Validators.required],\n      timePrescribed: [new Date().toISOString(), Validators.required] // Heure actuelle\n    });\n  }\n  ngOnInit() {\n    this.apiService.getMedications().subscribe({\n      next: data => {\n        // S'assurer que les données reçues sont un tableau d'objets Medication\n        if (Array.isArray(data)) {\n          this.medications = data; // Remplacez le tableau vide par les données reçues\n          console.log('Médicaments récupérés :', this.medications);\n        } else {\n          console.error('Les données récupérées ne sont pas un tableau !');\n        }\n      },\n      error: err => {\n        console.error('Erreur lors de la récupération des médicaments :', err);\n      }\n    });\n  }\n  nextStep() {\n    if (this.currentStepIndex < 6) {\n      this.currentStepIndex++;\n    }\n    if (this.currentStepIndex === 6) {\n      // Afficher un SweetAlert de confirmation avant de valider\n      Swal.fire({\n        title: 'Êtes-vous sûr ?',\n        text: \"Êtes-vous sûr de vouloir valider le formulaire ?\",\n        icon: 'warning',\n        showCancelButton: true,\n        confirmButtonText: 'Oui, valider',\n        cancelButtonText: 'Non, revenir en arrière'\n      }).then(result => {\n        if (result.isConfirmed) {\n          // Code pour valider le formulaire ou effectuer l'action finale\n          this.onSubmit(); // Exemple de méthode pour soumettre le formulaire\n        } else {\n          // Si l'utilisateur annule, revenir en arrière (ne pas incrémenter l'index)\n          this.currentStepIndex--;\n        }\n      });\n    }\n  }\n  previousStep() {\n    this.currentStepIndex--;\n  }\n  showSuccessAlert() {\n    Swal.fire({\n      title: 'Succès!',\n      text: 'La prescription a été remplie avec succès.',\n      icon: 'success',\n      confirmButtonText: 'OK'\n    }).then(result => {\n      if (result.isConfirmed) {\n        // Rediriger vers la page d'accueil (home-page)\n        this.router.navigate(['/home-page']);\n      }\n    });\n  }\n  onSubmit() {\n    console.log(this.prescriptionForm);\n    if (this.prescriptionForm.valid) {\n      const formData = this.prescriptionForm.value;\n      console.log(formData);\n      // Rechercher le médicament sélectionné par son ID\n      const selectedMedication = this.medications.find(med => med._id === formData.medicationId // Comparer directement les deux comme des chaînes\n      );\n      // Construire l'objet prescriptionData\n      const prescriptionData = {\n        medicationId: selectedMedication?._id || null,\n        medicationName: selectedMedication?.name || 'Médicament inconnu',\n        frequence: formData.frequence,\n        dosage: formData.dosage,\n        datePrescribed: formData.datePrescribed,\n        timePrescribed: formData.timePrescribed\n      };\n      this.apiService.postPrescriptions(prescriptionData).subscribe({\n        next: response => {\n          this.showSuccessAlert();\n          console.log('Prescription ajoutée avec succès :', response);\n        },\n        error: err => {\n          console.error('Erreur lors de l\\'envoi de la prescription :', err);\n        }\n      });\n      console.log('Prescription Data:', prescriptionData);\n      // Ajouter ici l'appel à une API ou toute autre action pour envoyer les données\n      // Exemple : this.apiService.postPrescription(prescriptionData).subscribe(...);\n    } else {\n      console.log('Le formulaire est invalide.');\n    }\n  }\n};\nPrescriptionFormComponent = __decorate([Component({\n  selector: 'app-prescription-form',\n  templateUrl: './prescription-form.component.html',\n  styleUrls: ['./prescription-form.component.css'],\n  standalone: true,\n  imports: [ReactiveFormsModule, CommonModule, NavBarComponent, SweetAlert2Module]\n})], PrescriptionFormComponent);\nexport { PrescriptionFormComponent };","map":{"version":3,"names":["CommonModule","Component","ReactiveFormsModule","Validators","NavBarComponent","SweetAlert2Module","Swal","PrescriptionFormComponent","router","fb","apiService","prescriptionForm","medications","stepData","key","value","currentStepIndex","constructor","group","medicationId","required","dosage","frequence","datePrescribed","Date","toISOString","timePrescribed","ngOnInit","getMedications","subscribe","next","data","Array","isArray","console","log","error","err","nextStep","fire","title","text","icon","showCancelButton","confirmButtonText","cancelButtonText","then","result","isConfirmed","onSubmit","previousStep","showSuccessAlert","navigate","valid","formData","selectedMedication","find","med","_id","prescriptionData","medicationName","name","postPrescriptions","response","__decorate","selector","templateUrl","styleUrls","standalone","imports"],"sources":["/Users/sullivan/Desktop/Guardian-project-sullivan-sextius/Guardian-project-sullivan-sextius/src/app/components/prescription-form/prescription-form.component.ts"],"sourcesContent":["import { CommonModule } from '@angular/common';\nimport { Component, NgModule, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, ReactiveFormsModule, Validators } from '@angular/forms';\nimport { NavBarComponent } from '../nav-bar/nav-bar.component';\nimport { ApiService } from 'src/services/api.service';\nimport { Medication } from 'src/models/medication';\nimport { SweetAlert2Module } from '@sweetalert2/ngx-sweetalert2';\nimport Swal from 'sweetalert2';\nimport { Router } from '@angular/router';\n\n@Component({\n  selector: 'app-prescription-form',\n  templateUrl: './prescription-form.component.html',\n  styleUrls: ['./prescription-form.component.css'],\n  standalone:true,\n  imports:[ReactiveFormsModule,CommonModule, NavBarComponent,SweetAlert2Module]\n})\nexport class PrescriptionFormComponent implements OnInit {\n  prescriptionForm: FormGroup;\n  medications:Medication[];\n  stepData: { key: string, value: any }[] = [\n    { key: 'nom', value: '' },\n    { key: 'traitement', value: '' },\n    { key: 'frequence', value: '' },\n    { key: 'medicament', value: '' },\n    { key: 'dosage', value: '' },\n    { key: 'prescriptionDate', value: '' },\n    { key: 'prescriptionTime', value: '' }\n  ];\n  currentStepIndex: number = 0; // Pour suivre l'étape actuelle\n\n  constructor(private router:Router, private fb: FormBuilder, private apiService:ApiService) {\n    this.prescriptionForm = this.fb.group({\n      medicationId: ['', Validators.required],\n      dosage: ['', Validators.required],\n      frequence: ['', Validators.required],  // Champ pour la fréquence\n      datePrescribed: [new Date().toISOString(), Validators.required], // Date actuelle\n      timePrescribed: [new Date().toISOString(), Validators.required], // Heure actuelle\n    });\n  }\n\n  \n  \n\n  ngOnInit(): void {\n    this.apiService.getMedications().subscribe({\n      next: (data) => {\n        // S'assurer que les données reçues sont un tableau d'objets Medication\n        if (Array.isArray(data)) {\n          this.medications = data; // Remplacez le tableau vide par les données reçues\n          console.log('Médicaments récupérés :', this.medications);\n        } else {\n          console.error('Les données récupérées ne sont pas un tableau !');\n        }\n      },\n      error: (err) => {\n        console.error('Erreur lors de la récupération des médicaments :', err);\n      }\n    });\n  }\n\n  nextStep(): void {\n    if (this.currentStepIndex < 6) {\n      this.currentStepIndex++;\n    }\n  \n    if (this.currentStepIndex === 6) {\n      // Afficher un SweetAlert de confirmation avant de valider\n      Swal.fire({\n        title: 'Êtes-vous sûr ?',\n        text: \"Êtes-vous sûr de vouloir valider le formulaire ?\",\n        icon: 'warning',\n        showCancelButton: true,\n        confirmButtonText: 'Oui, valider',\n        cancelButtonText: 'Non, revenir en arrière',\n      }).then((result) => {\n        if (result.isConfirmed) {\n          // Code pour valider le formulaire ou effectuer l'action finale\n          this.onSubmit(); // Exemple de méthode pour soumettre le formulaire\n        } else {\n          // Si l'utilisateur annule, revenir en arrière (ne pas incrémenter l'index)\n          this.currentStepIndex--;\n        }\n      });\n    }\n  }\n\n\n  previousStep(){\n    this.currentStepIndex--;\n  }\n  showSuccessAlert() {\n    Swal.fire({\n      title: 'Succès!',\n      text: 'La prescription a été remplie avec succès.',\n      icon: 'success',\n      confirmButtonText: 'OK'\n    }).then((result) => {\n      if (result.isConfirmed) {\n        // Rediriger vers la page d'accueil (home-page)\n        this.router.navigate(['/home-page']);\n      }\n    });\n  }\n\n  onSubmit(): void {\n    console.log(this.prescriptionForm)\n    if (this.prescriptionForm.valid) {\n      const formData = this.prescriptionForm.value;\n      console.log(formData);\n      \n      // Rechercher le médicament sélectionné par son ID\n      const selectedMedication = this.medications.find(\n        (med) => med._id === formData.medicationId // Comparer directement les deux comme des chaînes\n      );\n      // Construire l'objet prescriptionData\n      const prescriptionData = {\n        medicationId: selectedMedication?._id || null, // Inclure l'ID du médicament\n        medicationName: selectedMedication?.name || 'Médicament inconnu',\n        frequence: formData.frequence,\n        dosage: formData.dosage,\n        datePrescribed: formData.datePrescribed,\n        timePrescribed: formData.timePrescribed\n      };\n\n      this.apiService.postPrescriptions(prescriptionData).subscribe({\n        next: (response) => {\n          this.showSuccessAlert()\n          console.log('Prescription ajoutée avec succès :', response);\n        },\n        error: (err) => {\n          console.error('Erreur lors de l\\'envoi de la prescription :', err);\n        }\n      });\n      \n      console.log('Prescription Data:', prescriptionData);\n  \n      // Ajouter ici l'appel à une API ou toute autre action pour envoyer les données\n      // Exemple : this.apiService.postPrescription(prescriptionData).subscribe(...);\n    } else {\n      console.log('Le formulaire est invalide.');\n    }\n  }\n  \n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}