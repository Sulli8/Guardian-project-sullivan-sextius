{"ast":null,"code":"import _asyncToGenerator from \"/Users/sullivan/Desktop/Guardian-project-sullivan-sextius/Guardian-project-sullivan-sextius/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nlet NotificationsComponent = class NotificationsComponent {\n  swPush;\n  api;\n  displayMessage = false;\n  NotifsAllowed = false;\n  sub;\n  PUBLIC_VAPID_KEY_OF_SERVER = 'BISCiKs78JcYBoUgKqEMDMdeqZehBmtIBrvkotjdEKDHHYO87hvYy3H9VTYwWXnjHdMX_m2XmXn_nL6C1dxxw8o';\n  constructor(swPush, api) {\n    this.swPush = swPush;\n    this.api = api;\n    if (Notification.permission === 'granted') {\n      console.log('notif granted');\n      this.NotifsAllowed = true;\n    } else if (Notification.permission === 'denied') {\n      this.displayMessage = true;\n      Notification.requestPermission().then(permission => {\n        if (permission === 'granted') {\n          this.NotifsAllowed = true;\n        }\n      });\n    } else {\n      Notification.requestPermission().then(permission => {\n        if (permission === 'granted') {\n          this.NotifsAllowed = true;\n        }\n      });\n    }\n  }\n  subscribeToPush() {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      console.log('Starting subscription process...');\n      try {\n        if (Notification.permission !== 'granted') {\n          console.warn('Notifications permission is not granted.');\n          return;\n        }\n        if (!_this.swPush.isEnabled) {\n          console.error('Service Workers are not enabled in this environment.');\n          return;\n        }\n        if (!_this.PUBLIC_VAPID_KEY_OF_SERVER) {\n          console.error('Public VAPID key is missing.');\n          return;\n        }\n        console.log('Requesting subscription...');\n        const sub = yield _this.swPush.requestSubscription({\n          serverPublicKey: _this.PUBLIC_VAPID_KEY_OF_SERVER\n        });\n        console.log('Subscription successful:', JSON.stringify(sub, null, 2));\n        _this.sub = sub;\n        _this.api.postSubscription(sub).subscribe({\n          next: res => console.log('Subscription successfully sent to server:', res),\n          error: err => console.error('Error sending subscription to server:', err)\n        });\n      } catch (err) {\n        console.error('Could not subscribe due to:', err);\n        if (err instanceof Error) {\n          console.error('Error message:', err.message);\n          console.error('Stack trace:', err.stack);\n        }\n      }\n      console.log('Subscription process complete.');\n    })();\n  }\n};\nNotificationsComponent = __decorate([Component({\n  selector: 'app-notifications',\n  templateUrl: './notifications.component.html',\n  styleUrls: ['./notifications.component.scss']\n})], NotificationsComponent);\nexport { NotificationsComponent };","map":{"version":3,"names":["Component","NotificationsComponent","swPush","api","displayMessage","NotifsAllowed","sub","PUBLIC_VAPID_KEY_OF_SERVER","constructor","Notification","permission","console","log","requestPermission","then","subscribeToPush","_this","_asyncToGenerator","warn","isEnabled","error","requestSubscription","serverPublicKey","JSON","stringify","postSubscription","subscribe","next","res","err","Error","message","stack","__decorate","selector","templateUrl","styleUrls"],"sources":["/Users/sullivan/Desktop/Guardian-project-sullivan-sextius/Guardian-project-sullivan-sextius/src/app/components/notifications/notifications.component.ts"],"sourcesContent":["import { Component } from '@angular/core';\nimport { SwPush } from '@angular/service-worker';\nimport { ApiService } from '../../../api.service';\n\n@Component({\n  selector: 'app-notifications',\n  templateUrl: './notifications.component.html',\n  styleUrls: ['./notifications.component.scss']\n})\nexport class NotificationsComponent {\n  displayMessage = false;\n  NotifsAllowed = false;\n  sub:any;\n  PUBLIC_VAPID_KEY_OF_SERVER = 'BISCiKs78JcYBoUgKqEMDMdeqZehBmtIBrvkotjdEKDHHYO87hvYy3H9VTYwWXnjHdMX_m2XmXn_nL6C1dxxw8o';\n\n  constructor(readonly swPush: SwPush,private api:ApiService) {\n    if (Notification.permission === 'granted') {\n      console.log('notif granted');\n      this.NotifsAllowed = true;\n    } else if (Notification.permission === 'denied') {\n      this.displayMessage = true;\n        Notification.requestPermission().then(permission => {\n          if (permission === 'granted') {\n            this.NotifsAllowed = true;\n          }\n        });\n    } else {\n      Notification.requestPermission().then(permission => {\n        if (permission === 'granted') {\n          this.NotifsAllowed = true;\n        }\n      });\n    }\n  }\n\n\n  public async subscribeToPush() {\n    console.log('Starting subscription process...');\n    try {\n      if (Notification.permission !== 'granted') {\n        console.warn('Notifications permission is not granted.');\n        return;\n      }\n  \n      if (!this.swPush.isEnabled) {\n        console.error('Service Workers are not enabled in this environment.');\n        return;\n      }\n  \n      if (!this.PUBLIC_VAPID_KEY_OF_SERVER) {\n        console.error('Public VAPID key is missing.');\n        return;\n      }\n  \n      console.log('Requesting subscription...');\n      const sub = await this.swPush.requestSubscription({\n        serverPublicKey: this.PUBLIC_VAPID_KEY_OF_SERVER,\n      });\n  \n      console.log('Subscription successful:', JSON.stringify(sub, null, 2));\n      this.sub = sub;\n  \n      this.api.postSubscription(sub).subscribe({\n        next: (res) => console.log('Subscription successfully sent to server:', res),\n        error: (err) => console.error('Error sending subscription to server:', err),\n      });\n    } catch (err) {\n      console.error('Could not subscribe due to:', err);\n      if (err instanceof Error) {\n        console.error('Error message:', err.message);\n        console.error('Stack trace:', err.stack);\n      }\n    }\n    console.log('Subscription process complete.');\n  }\n  \n\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}