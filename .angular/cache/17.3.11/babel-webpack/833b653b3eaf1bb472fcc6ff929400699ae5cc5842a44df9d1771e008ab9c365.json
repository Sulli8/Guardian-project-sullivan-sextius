{"ast":null,"code":"import _asyncToGenerator from \"/Users/sullivan/Desktop/Guardian-project-sullivan-sextius/Guardian-project-sullivan-sextius/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { __decorate } from \"tslib\";\nimport { CommonModule } from '@angular/common';\nimport { Component } from '@angular/core';\nimport Swal from 'sweetalert2'; // Import SweetAlert2\nimport { NavBarComponent } from '../nav-bar/nav-bar.component';\nlet NotificationsComponent = class NotificationsComponent {\n  swPush;\n  api;\n  displayMessage = false;\n  NotifsAllowed = false;\n  sub;\n  relanceIntervalId = null;\n  PUBLIC_VAPID_KEY_OF_SERVER = 'BGPhLwNAwJZguAqSPCFEbfN_TkH7tTpe5AVTvrQxAfWEb8-alQBJtx9VLsL3i2T1sWWOKYRabRWq1mRMocUDt4c';\n  notification_data;\n  constructor(swPush, api) {\n    this.swPush = swPush;\n    this.api = api;\n  }\n  notifications = []; // Tableau pour stocker les médicaments\n  user = [];\n  hrefPrescription(url) {\n    console.log(url);\n  }\n  getNotifications() {\n    this.api.getNotifications().subscribe(data => {\n      console.log(data);\n      this.notifications = data.notifications; // Affecter les médicaments récupérés\n    }, error => {\n      console.error('Erreur lors de la récupération des médicaments:', error);\n    });\n  }\n  getUser() {\n    this.api.getUser().subscribe(data => {\n      console.log(data);\n      this.user = data.user; // Affecter les médicaments récupérés\n    }, error => {\n      console.error('Erreur lors de la récupération des médicaments:', error);\n    });\n  }\n  ngOnInit() {\n    // Vérification de l'état de la permission des notifications\n    if (Notification.permission === 'granted') {\n      console.log('Notification granted');\n      this.NotifsAllowed = true; // Si l'utilisateur a déjà autorisé, on active le bouton\n    } else if (Notification.permission === 'denied') {\n      this.displayMessage = true; // Si l'utilisateur a refusé, on affiche un message\n    } else {\n      // Si l'utilisateur n'a pas encore pris de décision, on demande la permission\n      Notification.requestPermission().then(permission => {\n        if (permission === 'granted') {\n          this.NotifsAllowed = true; // Si l'utilisateur accepte, on active le bouton\n        } else {\n          this.displayMessage = true; // Sinon, on affiche un message\n        }\n      });\n    }\n    this.checkIsSubscribed();\n    this.getNotifications();\n    this.getUser();\n  }\n  /**\n   * Vérifie si l'utilisateur est abonné aux notifications\n   */\n  checkIsSubscribed() {\n    this.api.checkIsSubsribe().subscribe(response => {\n      // Vérification de l'état de l'abonnement\n      if (response.isSubscribed) {\n        this.NotifsAllowed = true; // L'utilisateur est abonné\n        this.showSuccessAlert('Vous êtes déjà abonné aux notifications.');\n      } else {\n        this.NotifsAllowed = false; // L'utilisateur n'est pas abonné\n        this.showInfoAlert('Vous n\\'êtes pas encore abonné aux notifications.');\n      }\n    }, error => {\n      this.NotifsAllowed = false;\n      this.showErrorAlert('Erreur lors de la vérification de l\\'abonnement.');\n    });\n  }\n  /**\n   * Désabonne l'utilisateur des notifications push\n   */\n  unsubscribeFromPush() {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      try {\n        // Attendre la réponse de l'API pour désabonner l'utilisateur\n        const response = yield _this.api.unsubscribeFromNotifications();\n        _this.showSuccessAlert('Vous avez été désabonné avec succès des notifications.');\n        _this.NotifsAllowed = false; // Mettre à jour l'état NotifsAllowed\n      } catch (error) {\n        // Gérer les erreurs si la requête échoue\n        _this.showErrorAlert('Erreur lors de la désinscription des notifications.');\n      }\n    })();\n  }\n  /**\n   * Souscrire l'utilisateur aux notifications push\n   */\n  subscribeToPush() {\n    var _this2 = this;\n    return _asyncToGenerator(function* () {\n      try {\n        // Attendre la réponse de l'API pour souscrire aux notifications\n        const response = yield _this2.api.subscribeToPush();\n        // Si la souscription réussit, afficher le message de succès\n        _this2.showSuccessAlert('Souscription aux notifications réussie.');\n        _this2.NotifsAllowed = true; // Mettre à jour l'état NotifsAllowed\n      } catch (error) {\n        // Gérer les erreurs si la requête échoue\n        _this2.showErrorAlert('Erreur lors de la souscription aux notifications.');\n      }\n    })();\n  }\n  /**\n   * Afficher une SweetAlert de succès\n   */\n  showSuccessAlert(message) {\n    Swal.fire({\n      icon: 'success',\n      title: 'Succès',\n      text: message\n    });\n  }\n  /**\n   * Afficher une SweetAlert d'information\n   */\n  showInfoAlert(message) {\n    Swal.fire({\n      icon: 'info',\n      title: 'Information',\n      text: message\n    });\n  }\n  /**\n   * Afficher une SweetAlert d'erreur\n   */\n  showErrorAlert(message) {\n    Swal.fire({\n      icon: 'error',\n      title: 'Erreur',\n      text: message\n    });\n  }\n  ngOnDestroy() {\n    if (this.relanceIntervalId) {\n      clearInterval(this.relanceIntervalId);\n    }\n  }\n};\nNotificationsComponent = __decorate([Component({\n  selector: 'app-notifications',\n  templateUrl: './notifications.component.html',\n  styleUrls: ['./notifications.component.css'],\n  imports: [CommonModule, NavBarComponent],\n  standalone: true\n})], NotificationsComponent);\nexport { NotificationsComponent };","map":{"version":3,"names":["CommonModule","Component","Swal","NavBarComponent","NotificationsComponent","swPush","api","displayMessage","NotifsAllowed","sub","relanceIntervalId","PUBLIC_VAPID_KEY_OF_SERVER","notification_data","constructor","notifications","user","hrefPrescription","url","console","log","getNotifications","subscribe","data","error","getUser","ngOnInit","Notification","permission","requestPermission","then","checkIsSubscribed","checkIsSubsribe","response","isSubscribed","showSuccessAlert","showInfoAlert","showErrorAlert","unsubscribeFromPush","_this","_asyncToGenerator","unsubscribeFromNotifications","subscribeToPush","_this2","message","fire","icon","title","text","ngOnDestroy","clearInterval","__decorate","selector","templateUrl","styleUrls","imports","standalone"],"sources":["/Users/sullivan/Desktop/Guardian-project-sullivan-sextius/Guardian-project-sullivan-sextius/src/app/components/notifications/notifications.component.ts"],"sourcesContent":["import { CommonModule } from '@angular/common';\nimport { Component, OnDestroy, OnInit } from '@angular/core';\nimport { SwPush } from '@angular/service-worker';\nimport Swal from 'sweetalert2'; // Import SweetAlert2\nimport { ApiService } from '../../../services/api.service';\nimport { NavBarComponent } from '../nav-bar/nav-bar.component';\n\n@Component({\n  selector: 'app-notifications',\n  templateUrl: './notifications.component.html',\n  styleUrls: ['./notifications.component.css'],\n  imports: [CommonModule, NavBarComponent],\n  standalone: true\n})\nexport class NotificationsComponent implements OnInit, OnDestroy {\n  displayMessage = false;\n  NotifsAllowed = false;\n  sub: any;\n  private relanceIntervalId: any = null;\n  PUBLIC_VAPID_KEY_OF_SERVER = 'BGPhLwNAwJZguAqSPCFEbfN_TkH7tTpe5AVTvrQxAfWEb8-alQBJtx9VLsL3i2T1sWWOKYRabRWq1mRMocUDt4c';\n  notification_data: any;\n \n  constructor(readonly swPush: SwPush, private api: ApiService) {\n  \n  }\n  notifications: any[] = []; // Tableau pour stocker les médicaments\n  user: any[] = [];\n  hrefPrescription(url:String){\n    console.log(url)\n  }\n  getNotifications(){\n    this.api.getNotifications().subscribe(\n      (data) => {\n        console.log(data)\n        this.notifications = data.notifications;  // Affecter les médicaments récupérés\n     \n      },\n      (error) => {\n        console.error('Erreur lors de la récupération des médicaments:', error);\n      }\n    );\n  }\n\n  getUser(){\n    this.api.getUser().subscribe(\n      (data) => {\n        console.log(data)\n        this.user = data.user;  // Affecter les médicaments récupérés\n     \n      },\n      (error) => {\n        console.error('Erreur lors de la récupération des médicaments:', error);\n      }\n    );\n  }\n\n\n\n\n  ngOnInit(): void {\n    // Vérification de l'état de la permission des notifications\n    if (Notification.permission === 'granted') {\n      console.log('Notification granted');\n      this.NotifsAllowed = true; // Si l'utilisateur a déjà autorisé, on active le bouton\n    } else if (Notification.permission === 'denied') {\n      this.displayMessage = true; // Si l'utilisateur a refusé, on affiche un message\n    } else {\n      // Si l'utilisateur n'a pas encore pris de décision, on demande la permission\n      Notification.requestPermission().then(permission => {\n        if (permission === 'granted') {\n          this.NotifsAllowed = true; // Si l'utilisateur accepte, on active le bouton\n        } else {\n          this.displayMessage = true; // Sinon, on affiche un message\n        }\n      });\n    }\n    this.checkIsSubscribed();\n    this.getNotifications()\n    this.getUser();\n  }\n\n  /**\n   * Vérifie si l'utilisateur est abonné aux notifications\n   */\n  checkIsSubscribed(): void {\n    this.api.checkIsSubsribe().subscribe(\n      (response) => {\n        // Vérification de l'état de l'abonnement\n        if (response.isSubscribed) {\n          this.NotifsAllowed = true;  // L'utilisateur est abonné\n          this.showSuccessAlert('Vous êtes déjà abonné aux notifications.');\n        } else {\n          this.NotifsAllowed = false; // L'utilisateur n'est pas abonné\n          this.showInfoAlert('Vous n\\'êtes pas encore abonné aux notifications.');\n        }\n      },\n      (error) => {\n        this.NotifsAllowed = false;\n        this.showErrorAlert('Erreur lors de la vérification de l\\'abonnement.');\n      }\n    );\n  }\n\n  /**\n   * Désabonne l'utilisateur des notifications push\n   */\n  async unsubscribeFromPush(): Promise<void> {\n    try {\n      // Attendre la réponse de l'API pour désabonner l'utilisateur\n      const response = await this.api.unsubscribeFromNotifications();\n      this.showSuccessAlert('Vous avez été désabonné avec succès des notifications.');\n      this.NotifsAllowed = false;  // Mettre à jour l'état NotifsAllowed\n    } catch (error) {\n      // Gérer les erreurs si la requête échoue\n      this.showErrorAlert('Erreur lors de la désinscription des notifications.');\n    }\n  }\n\n  /**\n   * Souscrire l'utilisateur aux notifications push\n   */\n  async subscribeToPush(): Promise<void> {\n    try {\n      // Attendre la réponse de l'API pour souscrire aux notifications\n      const response = await this.api.subscribeToPush();\n\n      // Si la souscription réussit, afficher le message de succès\n      this.showSuccessAlert('Souscription aux notifications réussie.');\n      this.NotifsAllowed = true;  // Mettre à jour l'état NotifsAllowed\n    } catch (error) {\n      // Gérer les erreurs si la requête échoue\n      this.showErrorAlert('Erreur lors de la souscription aux notifications.');\n    }\n  }\n\n  /**\n   * Afficher une SweetAlert de succès\n   */\n  private showSuccessAlert(message: string): void {\n    Swal.fire({\n      icon: 'success',\n      title: 'Succès',\n      text: message,\n    });\n  }\n\n  /**\n   * Afficher une SweetAlert d'information\n   */\n  private showInfoAlert(message: string): void {\n    Swal.fire({\n      icon: 'info',\n      title: 'Information',\n      text: message,\n    });\n  }\n\n  /**\n   * Afficher une SweetAlert d'erreur\n   */\n  private showErrorAlert(message: string): void {\n    Swal.fire({\n      icon: 'error',\n      title: 'Erreur',\n      text: message,\n    });\n  }\n\n  ngOnDestroy(): void {\n    if (this.relanceIntervalId) {\n      clearInterval(this.relanceIntervalId);\n    }\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}