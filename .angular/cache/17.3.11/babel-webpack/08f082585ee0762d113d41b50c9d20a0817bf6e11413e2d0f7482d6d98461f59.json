{"ast":null,"code":"import _asyncToGenerator from \"/Users/sullivan/Desktop/Guardian-project-sullivan-sextius/Guardian-project-sullivan-sextius/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport config from '../../auth_config.json';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/service-worker\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"@angular/common/http\";\nexport class ApiService {\n  swPush;\n  router;\n  http;\n  displayMessage = false;\n  NotifsAllowed = false;\n  sub;\n  relanceIntervalId = null;\n  PUBLIC_VAPID_KEY_OF_SERVER = 'BGPhLwNAwJZguAqSPCFEbfN_TkH7tTpe5AVTvrQxAfWEb8-alQBJtx9VLsL3i2T1sWWOKYRabRWq1mRMocUDt4c';\n  notification_data;\n  constructor(swPush, router, http) {\n    this.swPush = swPush;\n    this.router = router;\n    this.http = http;\n  }\n  getNotifications() {\n    return this.http.get(`${config.apiUri}/api/get-notifications`);\n  }\n  getNotifications() {\n    return this.http.get(`${config.apiUri}/api/get-user`);\n  }\n  handleRedirection(valeur) {\n    if (valeur) {\n      // Si 'valeur' est true, redirigez vers la page d'accueil\n      this.router.navigate(['/home-page']);\n    } else {\n      // Si 'valeur' est false, redirigez vers la page du questionnaire\n      this.router.navigate(['/questionnaire']);\n    }\n  }\n  submitResponses(responses) {\n    return this.http.post(`${config.apiUri}/api/responses`, responses);\n  }\n  checkIfUserHasAnswered() {\n    return this.http.get(`${config.apiUri}/api/check-answers`);\n  }\n  checkIsSubsribe() {\n    return this.http.get(`${config.apiUri}/api/is-subscribe`);\n  }\n  checkRelanceNotification() {\n    return this.http.get(`${config.apiUri}/api/check-notifications`);\n  }\n  unSubsribeNotifications(sub) {\n    return this.http.put(`${config.apiUri}/api/unsubscribe`, {\n      webpushtoken: sub\n    });\n  }\n  unsubscribeFromNotifications() {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      const sub = yield _this.swPush.requestSubscription({\n        serverPublicKey: _this.PUBLIC_VAPID_KEY_OF_SERVER\n      });\n      _this.unSubsribeNotifications(sub).subscribe(res => {});\n    })();\n  }\n  // POST request for subscription\n  putSubscription(subscription, relance) {\n    const object = {\n      webpushtoken: subscription\n    };\n    const url = `${config.apiUri}/api/subscription`;\n    return this.http.put(url, object);\n  }\n  // Récupérer toutes les questions depuis l'API\n  getQuestions() {\n    const url = `${config.apiUri}/api/questions`;\n    return this.http.get(url);\n  }\n  // GET request for ping\n  ping$() {\n    return this.http.get(`${config.apiUri}/api/external`);\n  }\n  // GET request for medications\n  getMedications() {\n    const url = `${config.apiUri}/api/medicaments`; // URL de l'API pour récupérer les médicaments\n    return this.http.get(url);\n  }\n  subscribeToPush() {\n    var _this2 = this;\n    return _asyncToGenerator(function* () {\n      try {\n        const sub = yield _this2.swPush.requestSubscription({\n          serverPublicKey: _this2.PUBLIC_VAPID_KEY_OF_SERVER\n        });\n        console.log('sub', sub);\n        _this2.sub = sub;\n        _this2.putSubscription(sub, false).subscribe(res => {});\n      } catch (err) {\n        console.error('Could not subscribe due to:', err);\n      }\n    })();\n  }\n  checkNotify() {\n    var _this3 = this;\n    return _asyncToGenerator(function* () {\n      const sub = yield _this3.swPush.requestSubscription({\n        serverPublicKey: _this3.PUBLIC_VAPID_KEY_OF_SERVER\n      });\n      const object = {\n        webpushtoken: sub\n      };\n      const url = `${config.apiUri}/api/check-subscribed-notify`; // URL de l'API pour envoyer les prescriptions\n      return _this3.http.post(url, object).toPromise();\n    })();\n  }\n  // POST request for prescriptions\n  postPrescriptions(prescription) {\n    const url = `${config.apiUri}/api/prescriptions`; // URL de l'API pour envoyer les prescriptions\n    console.log(\"PRESCRIPTION : \", prescription);\n    return this.http.post(url, prescription);\n  }\n  // GET request for list of prescriptions\n  getPrescriptions() {\n    const url = `${config.apiUri}/api/list-prescriptions`; // URL de l'API pour récupérer la liste des prescriptions\n    return this.http.get(url);\n  }\n  // GET request for list of prescriptions\n  postRelances(subscription) {\n    const url = `${config.apiUri}/api/start-relance`; // URL de l'API pour récupérer la liste des prescriptions\n    return this.http.post(url, subscription);\n  }\n  // DELETE request for deleting a prescription\n  deletePrescription(id) {\n    const url = `${config.apiUri}/api/prescriptions/${id}`; // Assurez-vous que l'API accepte les requêtes DELETE sur ce point de terminaison\n    return this.http.delete(url);\n  }\n  static ɵfac = function ApiService_Factory(t) {\n    return new (t || ApiService)(i0.ɵɵinject(i1.SwPush), i0.ɵɵinject(i2.Router), i0.ɵɵinject(i3.HttpClient));\n  };\n  static ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ApiService,\n    factory: ApiService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["config","ApiService","swPush","router","http","displayMessage","NotifsAllowed","sub","relanceIntervalId","PUBLIC_VAPID_KEY_OF_SERVER","notification_data","constructor","getNotifications","get","apiUri","handleRedirection","valeur","navigate","submitResponses","responses","post","checkIfUserHasAnswered","checkIsSubsribe","checkRelanceNotification","unSubsribeNotifications","put","webpushtoken","unsubscribeFromNotifications","_this","_asyncToGenerator","requestSubscription","serverPublicKey","subscribe","res","putSubscription","subscription","relance","object","url","getQuestions","ping$","getMedications","subscribeToPush","_this2","console","log","err","error","checkNotify","_this3","toPromise","postPrescriptions","prescription","getPrescriptions","postRelances","deletePrescription","id","delete","i0","ɵɵinject","i1","SwPush","i2","Router","i3","HttpClient","factory","ɵfac","providedIn"],"sources":["/Users/sullivan/Desktop/Guardian-project-sullivan-sextius/Guardian-project-sullivan-sextius/src/services/api.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport config from '../../auth_config.json';\nimport { Observable } from 'rxjs';\nimport { Question } from 'src/models/question';\nimport { Router } from '@angular/router';\nimport { SwPush } from '@angular/service-worker';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ApiService {\n  displayMessage = false;\n  NotifsAllowed = false;\n  sub: any;\n  private relanceIntervalId: any = null;\n  PUBLIC_VAPID_KEY_OF_SERVER = 'BGPhLwNAwJZguAqSPCFEbfN_TkH7tTpe5AVTvrQxAfWEb8-alQBJtx9VLsL3i2T1sWWOKYRabRWq1mRMocUDt4c';\n  notification_data: any;\n  constructor(readonly swPush: SwPush,private router: Router,private http: HttpClient) {}\n\n \n  getNotifications():Observable<any>{\n    return this.http.get(`${config.apiUri}/api/get-notifications`);\n  }\n\n  getNotifications():Observable<any>{\n    return this.http.get(`${config.apiUri}/api/get-user`);\n  }\n\n  handleRedirection(valeur: boolean): void {\n    \n    if (valeur) {\n      // Si 'valeur' est true, redirigez vers la page d'accueil\n     \n      this.router.navigate(['/home-page']);\n     \n    } else {\n      // Si 'valeur' est false, redirigez vers la page du questionnaire\n      this.router.navigate(['/questionnaire']);\n    }\n  }\n\n  submitResponses(responses: any): Observable<any> {\n    return this.http.post(`${config.apiUri}/api/responses`, responses);\n  }\n\n  checkIfUserHasAnswered(): Observable<any> {\n    return this.http.get(`${config.apiUri}/api/check-answers`);\n  }\n\n  checkIsSubsribe(): Observable<any> {\n    return this.http.get(`${config.apiUri}/api/is-subscribe`);\n  }\n\n  checkRelanceNotification(){\n    return this.http.get(`${config.apiUri}/api/check-notifications`);\n  }\n  unSubsribeNotifications(sub:any): Observable<any> {\n    return this.http.put<any>(`${config.apiUri}/api/unsubscribe`, { webpushtoken: sub });\n  }\n  async unsubscribeFromNotifications() {\n    const sub = await this.swPush.requestSubscription({\n      serverPublicKey: this.PUBLIC_VAPID_KEY_OF_SERVER,\n    });\n    this.unSubsribeNotifications(sub).subscribe(res=>{\n\n    })\n  }\n  // POST request for subscription\n  putSubscription(subscription: any,relance:boolean): Observable<any> {\n    const object = {\n      webpushtoken:subscription\n    }\n    const url = `${config.apiUri}/api/subscription`; \n    return this.http.put<any>(url,object);\n  }\n  // Récupérer toutes les questions depuis l'API\n  getQuestions(): Observable<Question[]> {\n    const url = `${config.apiUri}/api/questions`\n    return this.http.get<Question[]>(url);\n  }\n\n  // GET request for ping\n  ping$(): Observable<any> {\n    return this.http.get(`${config.apiUri}/api/external`);\n  }\n\n  // GET request for medications\n  getMedications(): Observable<any> {\n    const url = `${config.apiUri}/api/medicaments`; // URL de l'API pour récupérer les médicaments\n    return this.http.get<any>(url);\n  }\n\n  public async subscribeToPush(){\n    try {\n      const sub = await this.swPush.requestSubscription({\n        serverPublicKey: this.PUBLIC_VAPID_KEY_OF_SERVER,\n      });\n      console.log('sub',sub);\n      this.sub = sub;\n      this.putSubscription(sub,false).subscribe(res=>{\n\n      });      \n    } catch (err) {\n      console.error('Could not subscribe due to:', err);\n    }\n  }\n  async checkNotify():Promise<any>{\n    const sub = await this.swPush.requestSubscription({\n      serverPublicKey: this.PUBLIC_VAPID_KEY_OF_SERVER,\n    });\n    const object = {\n      webpushtoken:sub,\n    }\n    const url = `${config.apiUri}/api/check-subscribed-notify`; // URL de l'API pour envoyer les prescriptions\n    return this.http.post<any>(url,object).toPromise();\n  }\n  // POST request for prescriptions\n  postPrescriptions(prescription: any): Observable<any> {\n    const url = `${config.apiUri}/api/prescriptions`; // URL de l'API pour envoyer les prescriptions\n    console.log(\"PRESCRIPTION : \", prescription);\n    return this.http.post<any>(url, prescription);\n  }\n\n  // GET request for list of prescriptions\n  getPrescriptions(): Observable<any> {\n    const url = `${config.apiUri}/api/list-prescriptions`; // URL de l'API pour récupérer la liste des prescriptions\n    return this.http.get<any>(url);\n  }\n\n    // GET request for list of prescriptions\n    postRelances(subscription: any): Observable<any> {\n      const url = `${config.apiUri}/api/start-relance`; // URL de l'API pour récupérer la liste des prescriptions\n      return this.http.post<any>(url,subscription);\n    }\n\n    // DELETE request for deleting a prescription\n    deletePrescription(id: number): Observable<any> {\n      const url = `${config.apiUri}/api/prescriptions/${id}`; // Assurez-vous que l'API accepte les requêtes DELETE sur ce point de terminaison\n      return this.http.delete<any>(url);\n    }\n\n\n\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}