{"ast":null,"code":"import _asyncToGenerator from \"/Users/sullivan/Desktop/Guardian-project-sullivan-sextius/Guardian-project-sullivan-sextius/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport config from '../../auth_config.json';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/service-worker\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"@angular/common/http\";\nexport let ApiService = /*#__PURE__*/(() => {\n  class ApiService {\n    swPush;\n    router;\n    http;\n    displayMessage = false;\n    NotifsAllowed = false;\n    sub;\n    relanceIntervalId = null;\n    PUBLIC_VAPID_KEY_OF_SERVER = 'BGPhLwNAwJZguAqSPCFEbfN_TkH7tTpe5AVTvrQxAfWEb8-alQBJtx9VLsL3i2T1sWWOKYRabRWq1mRMocUDt4c';\n    notification_data;\n    constructor(swPush, router, http) {\n      this.swPush = swPush;\n      this.router = router;\n      this.http = http;\n    }\n    loginUser() {\n      return this.http.post(`${config.apiUri}/api/login`, {});\n    }\n    deleteDataUser() {\n      return this.http.delete(`${config.apiUri}/api/user/delete`);\n    }\n    getNotifications() {\n      return this.http.get(`${config.apiUri}/api/get-notifications`);\n    }\n    getPrescription() {\n      return this.http.get(`${config.apiUri}/api/get-prescriptions`);\n    }\n    getUser() {\n      return this.http.get(`${config.apiUri}/api/get-user`);\n    }\n    exportPrescriptions() {\n      return this.http.get(`${config.apiUri}/api/export-pdf/prescriptions`, {\n        observe: 'response',\n        responseType: 'blob' // L'API renvoie un fichier binaire (PDF)\n      });\n    }\n    exportNotifications() {\n      return this.http.get(`${config.apiUri}/api/export-pdf/notifications`, {\n        observe: 'response',\n        responseType: 'blob' // L'API renvoie un fichier binaire (PDF)\n      });\n    }\n    handleRedirection(valeur) {\n      if (valeur) {\n        // Si 'valeur' est true, redirigez vers la page d'accueil\n        this.router.navigate(['/home-page']);\n      } else {\n        // Si 'valeur' est false, redirigez vers la page du questionnaire\n        this.router.navigate(['/questionnaire']);\n      }\n    }\n    submitResponses(responses) {\n      return this.http.post(`${config.apiUri}/api/responses`, responses);\n    }\n    checkIfUserHasAnswered() {\n      return this.http.get(`${config.apiUri}/api/check-answers`);\n    }\n    checkIsSubsribe() {\n      return this.http.get(`${config.apiUri}/api/is-subscribe`);\n    }\n    checkRelanceNotification() {\n      return this.http.get(`${config.apiUri}/api/check-notifications`);\n    }\n    unSubsribeNotifications(sub) {\n      return this.http.put(`${config.apiUri}/api/unsubscribe`, {\n        webpushtoken: sub\n      });\n    }\n    unsubscribeFromNotifications() {\n      var _this = this;\n      return _asyncToGenerator(function* () {\n        const sub = yield _this.swPush.requestSubscription({\n          serverPublicKey: _this.PUBLIC_VAPID_KEY_OF_SERVER\n        });\n        _this.unSubsribeNotifications(sub).subscribe(res => {});\n      })();\n    }\n    // POST request for subscription\n    putSubscription(subscription, relance) {\n      const object = {\n        webpushtoken: subscription\n      };\n      const url = `${config.apiUri}/api/subscription`;\n      return this.http.put(url, object);\n    }\n    // Récupérer toutes les questions depuis l'API\n    getQuestions() {\n      const url = `${config.apiUri}/api/questions`;\n      return this.http.get(url);\n    }\n    // GET request for ping\n    ping$() {\n      return this.http.get(`${config.apiUri}/api/external`);\n    }\n    // GET request for medications\n    getMedications() {\n      const url = `${config.apiUri}/api/medicaments`; // URL de l'API pour récupérer les médicaments\n      return this.http.get(url);\n    }\n    subscribeToPush() {\n      var _this2 = this;\n      return _asyncToGenerator(function* () {\n        try {\n          const sub = yield _this2.swPush.requestSubscription({\n            serverPublicKey: _this2.PUBLIC_VAPID_KEY_OF_SERVER\n          });\n          console.log('sub', sub);\n          _this2.sub = sub;\n          _this2.putSubscription(sub, false).subscribe(res => {});\n        } catch (err) {\n          console.error('Could not subscribe due to:', err);\n        }\n      })();\n    }\n    checkNotify() {\n      var _this3 = this;\n      return _asyncToGenerator(function* () {\n        const sub = yield _this3.swPush.requestSubscription({\n          serverPublicKey: _this3.PUBLIC_VAPID_KEY_OF_SERVER\n        });\n        const object = {\n          webpushtoken: sub\n        };\n        const url = `${config.apiUri}/api/check-subscribed-notify`; // URL de l'API pour envoyer les prescriptions\n        return _this3.http.post(url, object).toPromise();\n      })();\n    }\n    // POST request for prescriptions\n    postPrescriptions(prescription) {\n      const url = `${config.apiUri}/api/prescriptions`; // URL de l'API pour envoyer les prescriptions\n      console.log(\"PRESCRIPTION : \", prescription);\n      return this.http.post(url, prescription);\n    }\n    // GET request for list of prescriptions\n    getPrescriptions() {\n      const url = `${config.apiUri}/api/list-prescriptions`; // URL de l'API pour récupérer la liste des prescriptions\n      return this.http.get(url);\n    }\n    // GET request for list of prescriptions\n    postRelances(subscription) {\n      const url = `${config.apiUri}/api/start-relance`; // URL de l'API pour récupérer la liste des prescriptions\n      return this.http.post(url, subscription);\n    }\n    // DELETE request for deleting a prescription\n    deletePrescription(id) {\n      const url = `${config.apiUri}/api/prescriptions/${id}`; // Assurez-vous que l'API accepte les requêtes DELETE sur ce point de terminaison\n      return this.http.delete(url);\n    }\n    static ɵfac = function ApiService_Factory(t) {\n      return new (t || ApiService)(i0.ɵɵinject(i1.SwPush), i0.ɵɵinject(i2.Router), i0.ɵɵinject(i3.HttpClient));\n    };\n    static ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: ApiService,\n      factory: ApiService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n  return ApiService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}