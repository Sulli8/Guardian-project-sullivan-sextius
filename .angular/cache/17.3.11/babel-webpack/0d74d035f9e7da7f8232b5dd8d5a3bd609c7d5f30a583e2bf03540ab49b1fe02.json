{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { CommonModule } from '@angular/common';\nimport { Component, Input, Output, EventEmitter } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\n// Import PrimeNG Modules\nimport { RadioButtonModule } from 'primeng/radiobutton';\nimport { ButtonModule } from 'primeng/button'; // Si vous utilisez pButton\nimport { InputTextModule } from 'primeng/inputtext'; // Pour p-inputText\nimport { SpinnerModule } from 'primeng/spinner'; // Pour p-spinner\nlet WizardComponent = class WizardComponent {\n  router;\n  apiService;\n  title = '';\n  onSubmit = new EventEmitter();\n  currentStep = 0;\n  responses = {};\n  steps;\n  constructor(router, apiService) {\n    this.router = router;\n    this.apiService = apiService;\n  }\n  ngOnInit() {\n    // Charger les questions depuis l'API\n    this.apiService.getQuestions().subscribe(questions => {\n      // Organiser les questions par étape\n      console.log(questions);\n      this.steps = this.organizeQuestionsByStep(questions);\n    });\n  }\n  organizeQuestionsByStep(questions) {\n    const steps = [];\n    questions.questions.forEach(question => {\n      // Chercher l'étape existante pour cette question\n      const step = steps.find(s => s.step === question.step);\n      // Si l'étape n'existe pas encore, on la crée\n      if (!step) {\n        steps.push({\n          step: question.step,\n          questions: [question]\n        });\n      } else {\n        // Si l'étape existe déjà, on ajoute la question\n        step.questions.push(question);\n      }\n    });\n    return steps;\n  }\n  goToStep(index) {\n    if (index >= 0 && index < this.steps.length) {\n      this.currentStep = index;\n    }\n  }\n  nextStep() {\n    if (this.currentStep < this.steps.length - 1) {\n      this.currentStep++;\n    }\n  }\n  previousStep() {\n    if (this.currentStep > 0) {\n      this.currentStep--;\n    }\n  }\n  submitWizard() {\n    console.log('Réponses soumises:', this.responses);\n    // 1. Structurer les réponses, si nécessaire\n    const formattedResponses = this.formatResponses(this.responses);\n    // 2. Soumettre les réponses au backend via le service\n    this.apiService.submitResponses(formattedResponses).subscribe(response => {\n      console.log('Réponses envoyées avec succès', response);\n      // Vérifiez si la réponse du backend indique un succès\n      if (response.message === 'Réponses enregistrées avec succès') {\n        // Redirige l'utilisateur vers la page d'accueil\n        this.router.navigate(['/home-page']); // 'home-page' est l'URL vers la page d'accueil\n      }\n      this.onSubmit.emit({\n        success: true,\n        response\n      }); // Émet un événement si l'envoi réussit\n    }, error => {\n      console.error('Erreur lors de l\\'envoi des réponses', error);\n      this.onSubmit.emit({\n        success: false,\n        error\n      }); // Émet un événement en cas d'erreur\n    });\n  }\n  // Exemple de méthode pour formater les réponses avant de les envoyer (si nécessaire)\n  formatResponses(responses) {\n    // Ici, vous pouvez formater ou ajuster vos réponses avant l'envoi si nécessaire\n    return Object.keys(responses).map(key => ({\n      questionId: key,\n      response: responses[key]\n    }));\n  }\n};\n__decorate([Input()], WizardComponent.prototype, \"title\", void 0);\n__decorate([Output()], WizardComponent.prototype, \"onSubmit\", void 0);\n__decorate([Input()], WizardComponent.prototype, \"steps\", void 0);\nWizardComponent = __decorate([Component({\n  selector: 'app-wizard',\n  templateUrl: './wizard.component.html',\n  styleUrls: ['./wizard.component.css'],\n  standalone: true,\n  imports: [FormsModule, CommonModule, FormsModule, RadioButtonModule, ButtonModule, InputTextModule, SpinnerModule]\n})], WizardComponent);\nexport { WizardComponent };","map":{"version":3,"names":["CommonModule","Component","Input","Output","EventEmitter","FormsModule","RadioButtonModule","ButtonModule","InputTextModule","SpinnerModule","WizardComponent","router","apiService","title","onSubmit","currentStep","responses","steps","constructor","ngOnInit","getQuestions","subscribe","questions","console","log","organizeQuestionsByStep","forEach","question","step","find","s","push","goToStep","index","length","nextStep","previousStep","submitWizard","formattedResponses","formatResponses","submitResponses","response","message","navigate","emit","success","error","Object","keys","map","key","questionId","__decorate","selector","templateUrl","styleUrls","standalone","imports"],"sources":["/Users/sullivan/Desktop/Guardian-project-sullivan-sextius/Guardian-project-sullivan-sextius/src/app/components/wizard/wizard.component.ts"],"sourcesContent":["import { CommonModule } from '@angular/common';\nimport { Component, Input, Output, EventEmitter } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { Router } from '@angular/router';\nimport { ApiService } from 'src/services/api.service';\n// Import PrimeNG Modules\nimport { RadioButtonModule } from 'primeng/radiobutton';\nimport { ButtonModule } from 'primeng/button'; // Si vous utilisez pButton\nimport { InputTextModule } from 'primeng/inputtext'; // Pour p-inputText\nimport { SpinnerModule } from 'primeng/spinner'; // Pour p-spinner\nimport { BrowserModule } from '@angular/platform-browser';\n@Component({\n  selector: 'app-wizard',\n  templateUrl: './wizard.component.html',\n  styleUrls: ['./wizard.component.css'],\n  standalone:true,\n  imports:[FormsModule,CommonModule,\n    FormsModule,\n    RadioButtonModule,\n    ButtonModule,\n    InputTextModule,\n    SpinnerModule]\n})\nexport class WizardComponent {\n  @Input() title: string = ''; \n  @Output() onSubmit = new EventEmitter<any>(); \n\n  currentStep = 0;\n  responses: { [key: number]: any } = {};\n  @Input() steps: any[];\n  constructor(private router:Router, private apiService: ApiService) {}\n\n  ngOnInit() {\n   \n    // Charger les questions depuis l'API\n    this.apiService.getQuestions().subscribe((questions) => {\n      // Organiser les questions par étape\n      console.log(questions)\n      this.steps = this.organizeQuestionsByStep(questions);\n    });\n  }\n\n   organizeQuestionsByStep(questions) {\n    const steps = [];\n  \n    questions.questions.forEach((question) => {\n      // Chercher l'étape existante pour cette question\n      const step = steps.find((s) => s.step === question.step);\n      \n      // Si l'étape n'existe pas encore, on la crée\n      if (!step) {\n        steps.push({ step: question.step, questions: [question] });\n      } else {\n        // Si l'étape existe déjà, on ajoute la question\n        step.questions.push(question);\n      }\n    });\n  \n    return steps;\n  }\n  \n\n\n\n  goToStep(index: number) {\n    if (index >= 0 && index < this.steps.length) {\n      this.currentStep = index;\n    }\n  }\n\n  nextStep() {\n    if (this.currentStep < this.steps.length - 1) {\n      this.currentStep++;\n    }\n  }\n\n  previousStep() {\n    if (this.currentStep > 0) {\n      this.currentStep--;\n    }\n  }\n\n\n  submitWizard() {\n    console.log('Réponses soumises:', this.responses);\n\n    // 1. Structurer les réponses, si nécessaire\n    const formattedResponses = this.formatResponses(this.responses);\n\n    // 2. Soumettre les réponses au backend via le service\n    this.apiService.submitResponses(formattedResponses).subscribe(\n      (response) => {\n        console.log('Réponses envoyées avec succès', response);\n        \n        // Vérifiez si la réponse du backend indique un succès\n        if (response.message === 'Réponses enregistrées avec succès') {\n          // Redirige l'utilisateur vers la page d'accueil\n          this.router.navigate(['/home-page']);  // 'home-page' est l'URL vers la page d'accueil\n        }\n\n        this.onSubmit.emit({ success: true, response });  // Émet un événement si l'envoi réussit\n      },\n      (error) => {\n        console.error('Erreur lors de l\\'envoi des réponses', error);\n        this.onSubmit.emit({ success: false, error });  // Émet un événement en cas d'erreur\n      }\n    );\n  }\n\n  // Exemple de méthode pour formater les réponses avant de les envoyer (si nécessaire)\n  formatResponses(responses: any) {\n    // Ici, vous pouvez formater ou ajuster vos réponses avant l'envoi si nécessaire\n    return Object.keys(responses).map((key) => ({\n      questionId: key,\n      response: responses[key]\n    }));\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}